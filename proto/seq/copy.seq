//=========================常量声明========================
#kPathCopyPass                                  //副本通关
#kPathCopyPassEquip                             //副本通关指定装备奖励
#kPathCopyGroupPass                             //副本集群通关
#kPathCopyBossFight                             //副本boss挑战奖励
#kPathCopySearch                                //副本探索
#kPathCopyFightMeet                             //副本迎敌战
#kPathCopyBossMopup                             //副本BOSS扫荡
#kPathCopyCommit                                //副本提交验证
#kPathCopyMopupReset                            //副本扫荡重置
#kPathCopyAreaPass                              //副本区域通关
#kPathCopyAreaPresentTake                       //副本区域满星通关

#kCopyEventTypeRandom           1               //随机事件
#kCopyEventTypeBox              2               //宝箱 [ objid: packet_id ], [ val: reward_id ]
#kCopyEventTypeReward           3               //奖励 [ objid: reward_id ]
#kCopyEventTypeGut              4               //剧情 [ objid: gut_id ]
#kCopyEventTypeShop             5               //商人
#kCopyEventTypeFight            6               //战斗 [ objid: monster_id ], [ val: fight_id ], Monster.strength 消耗体力
#kCopyEventTypeFightMeet        7               //迎敌战 [ objid: monster_id ], [ val: fight_id ], Monster.strength 消耗体力

#kCopyFightLogMaxCount          5               //副本LOG长度

#kCopyStateBossCol              1               //(已废弃)
#kCopyStateEventEnd             2               //副本事件已完全(不表示完成度全满)

#kCopyTypeGeneral               0               //普通副本
#kCopyTypeBoss                  1               //BOSS副本(可扫荡)

#kCopyMopupTypeNormal           1               //普通副本
#kCopyMopupTypeElite            2               //精英副本
#kCopyMaterial                  3               //副本资源点

#kCopyMopupAttrRound            1               //阵亡人数
#kCopyMopupAttrTimes            2               //扫荡次数
#kCopyMopupAttrReset            3               //重置次数

#kCopyAreaAttrPass              1               //副本区域通关
#kCopyAreaAttrFullStar          2               //副本区域满星

#kErrCopyParam                                  //副本参数错误
#kErrCopyData                                   //副本数据错误
#kErrCopyExist                                  //副本已存在
#kErrCopyMopupNotExist                          //副本扫荡数据不存在
#kErrCopyNotExist                               //副本不存在
#kErrCopyEnded                                  //副本已通关
#kErrCopyNotPass                                //副本未通关
#kErrCopyFront                                  //副本前置条件不足
#kErrCopyUndone                                 //副本存在未通关记录
#kErrCopyNotEnd                                 //副本未结束
#kErrCopyEventOrder                             //副本事件序列错误
#kErrCopyEventIndex                             //副本事件进度索引错误
#kErrCopyRewardNotExist                         //副本奖励数据不存在
#kErrCopyBossNotExist                           //副本BOSS不存在
#kErrCopyStrengthNotEnought                     //副本体力不足
#kErrCopyBossMopupScore                         //副本BOSS扫荡评分不足
#kErrCopyChunkIndexExsit                        //副本探索块索引数据已存在
#kErrCopyChunkCateNull                          //副本探索块类型数据错误
#kErrCopyMopupRefTimesNotEnough                 //副本扫荡重置次数不足
#kErrCopyMopupTimesFull                         //不需要重置扫荡次数
#kErrCopyMopupTimesNotEnough                    //副本扫荡次数不足
#kErrCopyAreaNotExist                           //副本区域数据不存在
#kErrCopyAreaPresentTaked                       //副本区域奖励已领取
#kErrCopyAreaNoPass                             //副本区域未通关
#kErrCopyAreaNoFullStar                         //副本区域未达到全星要求
#kErrCopyBossExist                              //副本BOSS已存在
#kErrCopyFightIdNotEqual                        //副本战斗id不匹配

//==========================通迅结构==========================
//副本结构
SUserCopy
{
    copy_id                 : uint32;               //副本Id
    posi                    : int32;                //当前进度(从0开始)
    index                   : int32;                //当前进度内的步骤索引
    status                  : uint32;               //副本状态[ kCopyStateXXX ]

    chunk                   : array< S3UInt32 >;    //事件列表, cate 见 kCopyEvnetXYZ
    reward                  : array< S3UInt32 >;    //奖励列表, [ cate: [0不要体力, 1需要体力], objid: reward_id, val: 完成度 ]
    coins                   : array< array< S3UInt32 > >;    //掉落列表

    fight                   : indices< SFight >;    //chunk 对应的战斗Id
    seed                    : indices< SInteger >;  //chunk 对应的战斗种子

    gut                     : indices< SGutInfo >;  //剧情列表
}

//副本记录, 只有 SUserCopy.status 带有 kCopyStateBossCol 状态并且通关后才会该记录
SCopyLog
{
    copy_id                 : uint32;           //通关副本Id
    time                    : uint32;           //通关时间
}

//副本战斗记录
SCopyFightLog
{
    copy_id     :   uint32;     //副本id
    fight_id    :   uint32;     //战斗log
    ack_id      :   uint32;     //进攻者id
    ack_level   :   uint32;     //进攻者等级
    ack_name    :   string;     //进攻者名字
    ack_avatar  :   uint16;     //进攻者头像
    log_time    :   uint32;     //战斗记录时间
    star        :   uint32;     //星级
    fight_value :   uint32;     //战斗力
}

//区域通关记录
SAreaLog
{
    area_id                 : uint32;           //区域id( copy_id / 1000 )

    normal_full_take_time   : uint32;           //普通区域满星领奖时间
    elite_full_take_time    : uint32;           //精英区域满星领奖时间
    normal_pass_take_time   : uint32;           //普通区域通关领奖时间
    elite_pass_take_time    : uint32;           //精英区域通关领奖时间
}

SCopyMopup
{
    normal_round            : indices< uint32 >;    //普通副本boss击杀最小阵亡人数
    elite_round             : indices< uint32 >;    //精英副本boss击杀最小阵亡人数

    normal_times            : indices< uint32 >;    //普通副本boss扫荡次数, < boss_id, 次数 >
    elite_times             : indices< uint32 >;    //精英副本boss扫荡次数, < boss_id, 次数 >

    normal_reset            : indices< uint32 >;    //普通副本boss重置次数
    elite_reset             : indices< uint32 >;    //精英副本boss重置次数
}

//副本BOSS挑战临时结构
SCopyBossFight
{
    mopup_type              : uint8;            //副本扫荡类型
    boss_id                 : uint32;           //挑战boss monster id

    fight_id                : uint32;
    seed                    : uint32;

    coins                   : array< S3UInt32 >;    //战斗掉落记录
}

//=========================数据中心========================
CCopy
{
    boss_fight              : indices< SCopyBossFight >;
    copy_log_map            : indices< array<SCopyFightLog> >;      //副本战斗记录保存
    is_load_copyfight_log   : uint32;                               //是否已经load副本记录
}

//=========================通迅协议========================
//@@
PQCopyOpen
{
    copy_id                 : uint32;           //副本Id
}
PRCopyOpen
{
    data                    : SCompressData;    //副本数据

    result                  : int32;
}

PRCopyData
{
    data                    : SCompressData;    //副本数据
}

//关闭当前副本
PQCopyClose
{
}

PRCopyClose
{
    result                  : int32;            //0为正常, != 0 为错误码
}

//事件验证基类
PQCopyCommitEvent
{
    posi                    : int32;            //进度索引(从0开始)
    index                   : int32;            //同一进度事件内的序列, 剧情事件会包含多个处理步骤(从0开始)
}

//失败返回
PRCopyCommitEvent
{
    posi                    : int32;
    index                   : int32;

    result                  : int32;            //0为正常, !=0 为错误码
}

//事件验证--战斗
PQCopyCommitEventFight : PQCopyCommitEvent
{
    fight_id                : uint32;                       //战斗id
    order_list              : array<SFightOrder>;           //战斗技能出手LOG
    fight_info_list         : array<SFightPlayerSimple>;    //战斗结束时候的信息
}

//失败返回
PRCopyCommitEventFight : PRCopyCommitEvent
{
    fight_id                : uint32;                       //战斗id
    order_list              : array<SFightOrder>;
    fight_info_list         : array<SFightPlayerSimple>;
}

//刷新副本数据( 战斗属性更新等, 不影响已提交验证的事件 )
PQCopyRefurbish
{
}
PRCopyRefurbish
{
    data                    : SCompressData;    //副本数据
}

//请求副本记录
PQCopyLog
{
    copy_id                 : uint32;
}

//返回副本记录
PRCopyLog
{
    data                    : SCopyLog;
}

//请求副本记录列表
PQCopyLogList
{
}

//返回副本记录列表
PRCopyLogList
{
    data                    : indices< SCopyLog >;  
}

//挑战boss
PQCopyBossFight
{
    mopup_type              : uint8;            //挑战boss类型 [ kCopyMopupTypeNormal, kCopyMopupTypeElite ]

    boss_id                 : uint32;           //挑战boss的 monster_id
}

//返回挑战boss战斗数据
PRCopyBossFight
{
    fight_id                : uint32;           //战斗Id
    seed                    : uint32;           //战斗随机种子

    fight                   : SFight;           //战斗数据
    coins                   : array< S3UInt32 >;    //战斗掉落记录
}

//挑战boss战斗确认
PQCopyBossFightCommit
{
    fight_id                : uint32;                       //副本战斗Id
    order_list              : array<SFightOrder>;           //战斗技能出手LOG 

    fight_info_list         : array<SFightPlayerSimple>;    //战斗结束时候的信息
}

//副本区域通关协议返回
PRCopyAreaData
{
    data                    : SAreaLog;         //副本区域数据
}

//副本区域全星通关奖励领取
PQCopyAreaPresentTake
{
    mopup_type              : uint8;            //副本扫荡类型 [ kCopyMopupTypeNormal | kCopyMopupTypeElite ]
    area_attr               : uint8;            //副本区域属性 [ kCopyAreaAttrPass | kCopyAreaAttrFullStar ]
    area_id                 : uint32;           //副本区域id( int( Copy.xls->id / 1000 ) )
}
PRCopyAreaPresentTake
{
    mopup_type              : uint8;
    area_attr               : uint8;
    area_id                 : uint32;
}

//副本扫荡
PQCopyBossMopup
{
    mopup_type              : uint8;            //副本扫荡类型 [ kCopyMopupTypeNormal | kCopyMopupTypeElite ]
    boss_id                 : uint32;           //monster_id

    count                   : uint32;           //扫荡次数
}

//返回扫荡结果
PRCopyBossMopup
{
    mopup_type              : uint8;
    boss_id                 : uint32;

    coins                   : array< array< S3UInt32 > >;   //扫荡获得, 一维数组为扫荡次数索引
}

//重置副本扫荡
PQCopyMopupReset
{
    mopup_type              : uint8;            //副本扫荡类型 [ kCopyMopupTypeNormal | kCopyMopupTypeElite ]

    boss_id                 : uint32;
}

//返回副本扫荡记录
PRCopyMopupData
{
    mopup_type              : uint8;            //副本扫荡类型 [ kCopyMopupTypeNormal | kCopyMopupTypeElite ]
    mopup_attr              : uint8;            //副本值类型 [ kCopyMopupAttrRound | kCopyMopupAttrTimes | kCopyMopupAttrReset ]

    boss_id                 : uint32;           //0 为需要将相关类型所有扫荡次数同时重置为 value
    value                   : uint32;           //扫荡次数
}

//申请最近的竞技log
PQCopyFightLog
{
}

PRCopyFightLog
{
    fightlog_list       :   indices< array<SCopyFightLog> >;                  //战斗log
}

PQCopyFightLogLoad
{
    copy_id             : uint32;
}

PRCopyFightLogLoad
{
    copy_id     :  uint32;
    list        :  array<SCopyFightLog>;
}

PQCopyFightLogSave
{
    copy_id     :  uint32;
    list        :  array<SCopyFightLog>;
}
